const.TRANSACTION_HASH_MEMORY_INDEX=10
const.UNKNOWN_UTXO_HASH=100

#! Compute RPO hash of a UTXO which is composed of owner (4 words) and value (1 word)
proc.utxo_hash
    # Because it's not a multiple of 8, we pad with 1,0,0,0 and append 1,0,0 to value, ref: ElementHasher
    push.1.0.0.0
    adv_push.5
    push.1.0.0
    hperm
    dropw swapw dropw # Isolate hash because final output is [Word, Hash, Word].
end

#! Search for the transaction hash index and push on to the stack. If not found, error out
#! Note: Assumes the stack has the Merkle root at the top and memory has the transaction input hash
proc.merkle_index
    # Iterate over all the Merkle tree leaves starting from index 0
    push.0 mem_store.0
    repeat.8
        mem_load.0
        push.3

        mtree_get
        padw mem_loadw.TRANSACTION_HASH_MEMORY_INDEX
        eqw
        if.true
            mem_load.0
            # Index 1,2... when found and 0 for not found
            add.1
            mem_store.1
        end
        dropw dropw

        # Increment the current index
        mem_load.0
        add.1
        mem_store.0
    end

    # Error out if index is not found and adjust index to start from 0 again
    mem_load.1
    eq.0
    assertz.err=UNKNOWN_UTXO_HASH
    mem_load.1
    sub.1
end

begin
    # Keep transaction input hash in memory for multiple future access
    mem_storew.TRANSACTION_HASH_MEMORY_INDEX dropw

    exec.merkle_index

    exec.utxo_hash
end
