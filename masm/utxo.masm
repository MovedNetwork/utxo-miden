use.std::crypto::dsa::rpo_falcon512

const.RPO_RATE_WIDTH=8
const.TRANSACTION_HASH_MEMORY_INDEX=10
const.NEW_TRANSACTION_HASH_MEMORY_INDEX=20
const.CURRENT_UTXO_MEMORY_INDEX=30
const.MERKLE_TREE_DEPTH=3
const.MERKLE_TREE_NUMBER_LEAVES=8
const.UNKNOWN_UTXO_HASH=100

#! Performs a mod b => q * b + r
#! Stack goes from [b, a] to remainder and quotient [r, q]
proc.divmod
    push.0
    movdn.2
    dup.1 dup.1
    gte
    while.true
        movup.2 add.1 movdn.2 # increment quotient
        dup
        movdn.2
        sub
        swap
        dup.1 dup.1
        gte
    end
    drop
end

#! Compute RPO hash of a UTXO which is composed of owner (4 words) and value (1 word)
proc.utxo_hash
    # Because it's not a multiple of 8, we pad with 1,0,0,0 and append 1,0,0 to value, ref: ElementHasher
    push.1.0.0.0
    adv_push.5
    push.1.0.0
    hperm
    dropw swapw dropw # Isolate hash because final output is [Word, Hash, Word].
end

#! Compute the RPO hash of elements from a range of addresses in memory.
#! The input stack is `[n, start, ...]` and the output stack is `[HASH, ...]`.
#! `n` is the number of elements to hash, `start` is the memory address to start at.
#! It is assumed the elements are contiguous in memory. `n` does not need to be a multiple
#! of 4 (i.e. the data does not need to be in whole words), but 4 elements will be
#! taken from each memory address. For example, with input `[6, 0x02, ...]` the whole
#! word will be taken from address `0x02` and the first two elements of the word at
#! address `0x03` will also be included in the hash.
proc.range_hash
    push.RPO_RATE_WIDTH
    u32divmod
    dup
    movdn.3 # put the extra copy of `n % RPO_RATE_WIDTH` away, we'll need it later
    eq.0
    if.true
        # If `n % RPO_RATE_WIDTH == 0` then state starts as all zeros.
        push.0
    else
        # Otherwise the state begins with a 1
        push.1
    end
    push.0.0.0
    push.0.0.0.0.0.0.0.0
    # The element 12 items down the stack now is `n / RPO_RATE_WIDTH`, which
    # is the number of full states we can fill before needed to handle the remainder.
    movup.12
    dup
    push.0 gt
    while.true
        sub.1 # subtract 1 from the number of whole cycles counter
        movdn.12 # move the counter down below the current hasher state
        dropw dropw # drop the words that are going to be replaced
        movup.5 # pull up the memory address we are supposed to load from
        dup
        padw movup.4 mem_loadw
        movup.4
        add.1
        dup
        padw movup.4 mem_loadw
        movup.4
        add.1
        movdn.13 # put the memory counter away
        hperm # do the hashing
        movup.12 # bring the cycles counter back
        dup
        push.0 gt
    end
    # Loop over -- no more full cycles left
    assertz # the top of the stack should be 0 if everything has worked so far
    movup.13 # bring back the `n % RPO_RATE_WIDTH` value from earlier.
    dup
    eq.0
    if.true
        # the last full cycle was the end (no remainder), so just stack cleanup
        drop # drop the `n % RPO_RATE_WIDTH` value
        dropw # drop the last word of the state
        swapw # we're going to keep the second word of the state
        dropw # drop the first word of the state
        movup.4 # pull up the memory counter and drop it
        drop
    else
        # still 1 more hperm to do.
        movdn.13 # put away the `n % RPO_RATE_WIDTH` value
        dropw dropw # drop the words we're going to replace
        movup.4 # bring up the memory counter
        dup
        padw movup.4 mem_loadw
        movup.4
        add.1
        movup.9 # bring back up `n % RPO_RATE_WIDTH` value
        dup
        push.4 gt
        if.true
            # if `n % RPO_RATE_WIDTH > 4` then we need to load up the next word too
            sub.4
            movdn.9
            padw movup.4 mem_loadw # it's ok to consume our memory counter, we don't need it anymore
            movup.12
            # The number on top of the stack is in the range [1, 3]
            # it tells us how many elements we had to read from the word
            # we just read. The element after that is set to 1 and the reset to 0.
            push.4 swap sub
            # Now the number on top of the stack represents how many elements
            # we need to modify (but it is still in the range [1, 3]).
            dup
            eq.1
            if.true
                # Need to modify only the last element
                drop # drop the bookkeeping value
                drop # drop the last element from the word we read from memory
                push.1
            else
                eq.2 # it's ok to consume our bookkeeping value, we don't need it anymore
                if.true
                # Need to modify two elements
                drop drop # drop the elements to modify
                push.1.0
                else
                # Must need to modify three elements
                drop drop drop
                push.1.0.0
                end
            end
        else
            # if `n % RPO_RATE_WIDTH <= 4` then we do not need to load another word
            swap drop # drop memory counter (which was the next element on the stack)
            # The number on top of the stack is in the range [1, 4]. It is how many elements
            # to use from the last word we read from memory.
            push.4 swap sub
            # Now the number on top of the stack represents how many elements
            # we need to modify and it is in the range [0, 3].
            dup
            eq.0
            if.true
                # We used the whole prior word, so just drop the bookkeeping value and
                # fill in the rest of the state
                drop
                push.1.0.0.0
            else
                dup
                eq.1
                if.true
                    drop # drop bookkeeping value
                    drop # drop value to replace
                    push.1
                else
                    eq.2 # it's ok to consume the bookkeeping value now
                    if.true
                        drop drop
                        push.1.0
                    else
                        # must be 3 values to replace
                        drop drop drop
                        push.1.0.0
                    end
                end
                # push on the rest of the state
                push.0.0.0.0
            end
        end
        hperm # do the last hashing
        # stack cleanup
        dropw swapw dropw
    end
end

#! Search for the transaction hash index and push on to the stack. If not found, error out
#! Note: Assumes the stack has the Merkle root at the top and memory has the transaction input hash
proc.merkle_index
    # Iterate over all the Merkle tree leaves starting from index 0
    push.0 mem_store.0
    repeat.MERKLE_TREE_NUMBER_LEAVES
        mem_load.0
        push.MERKLE_TREE_DEPTH

        mtree_get
        padw mem_loadw.TRANSACTION_HASH_MEMORY_INDEX
        eqw
        if.true
            mem_load.0
            # Index 1,2... when found and 0 for not found
            add.1
            mem_store.1
        end
        dropw dropw

        # Increment the current index
        mem_load.0
        add.1
        mem_store.0
    end

    # Error out if index is not found and adjust index to start from 0 again
    mem_load.1
    eq.0
    assertz.err=UNKNOWN_UTXO_HASH
    mem_load.1
    sub.1
end

proc.verify_transaction_hash
    dup # make a copy of the number of elements (we'll need it later)
    dup movdn.10 # make another copy and push it back for other procedures
    sub.4 # discard number of txn hash elements
    u32divmod.5 # get how many UTXOs exist
    assertz # check correct input
    push.0.0.0.0 # store transaction hash from the map to the memory
    adv.push_mapval
    padw adv_loadw
    mem_storew.TRANSACTION_HASH_MEMORY_INDEX
    dropw dropw # discard the hash and map key's 3 zeros
    push.1
    dup.1 dup.1 # copy to compare
    gte
    while.true
        dup
        push.0.0.0 # build map key
        adv.push_mapval dropw # load the UTXO from the map
        padw adv_loadw adv_push.1 # push UTXO owner and value to the operand stack
        movup.7 movup.7 movup.7 # bring back the indexes
        add.1 # next advice map index
        dup.1 dup.1 # copy to compare loop counters
        gte
    end
    drop drop # drop the loop counters, we're left with total number of elements

    # Insert the UTXO elements into memory
    sub.4 # deduct number of transaction elements
    u32divmod.4 # stack: [<mod>, <quotient>] use mod and quotient for insertion index
    dup push.0
    gt
    # Identify how many zeros we should pad the stack with
    if.true
        push.4
        swap
        sub
        # Another memory allocation for remaining elements
        swap add.1 swap
    end

    dup push.0 # copy to compare and start the loop
    gt
    while.true # insert zeros as many as identified above
        push.0 # pad a zero to the elements
        movdn.2
        sub.1
        dup
        push.0 # copy to compare and loop again
        gt
    end
    drop # discard loop counter

    # Insert into the memory in reverse order since stack is in reverse now
    dup push.0 # copy to compare and start the loop
    gt
    while.true
        dup sub.1 movdn.5 # push back decremented memory index
        push.TRANSACTION_HASH_MEMORY_INDEX # memory should start from this index
        add # calculate where in the memory to insert
        mem_storew dropw
        dup push.0 # copy to compare and continue the loop
        gt
    end
    drop # discard the counter

    # Compute the hash of the data in memory
    dup.8 # copy number of transaction elements
    push.TRANSACTION_HASH_MEMORY_INDEX # bring back the starting memory address
    swap # bring the number of elements to the top
    exec.range_hash

    # Check the hash matches
    mem_storew.NEW_TRANSACTION_HASH_MEMORY_INDEX # keep a copy of the hash in memory
    assert_eqw
end

proc.verify_utxo
    # Check the provided UTXO matches its hash
    dup movdn.5 # copy and send back the found merkle index
    push.MERKLE_TREE_DEPTH
    mtree_get
    adv_push.1
    push.CURRENT_UTXO_MEMORY_INDEX # keep current UTXO value at index + 1
    add.1
    mem_store
    # Hashing UTXO to compare with the one in merkle tree
    push.CURRENT_UTXO_MEMORY_INDEX
    push.5 # UTXO has 5 elements: 4 for owner + 1 for value
    exec.range_hash
    assert_eqw

    # Check starting UTXO value >= total final UTXO values
    push.CURRENT_UTXO_MEMORY_INDEX
    add.1
    mem_load

    # Calculate the total final UTXO values
    movup.6 dup movdn.7 # bring the number of elements and make the same copy
    push.0 swap # value total
    sub.4 # discard count of tx hash elements
    u32divmod.5 # each UTXO will have 5 elements
    assertz # make sure division is perfect so the provided number of elements is correct
    dup # keep a copy of number of UTXOs for the loop
    push.0 # for gt comparision
    gt
    while.true
        push.0.0.0 # fill up to set the advice map key
        adv.push_mapval # load UTXO
        padw adv_loadw adv_push.1 # load UTXO owner and value
        movdn.8 # move the value after map key
        dropw # discard UTXO owner
        drop drop drop
        swap.2 # swap loop counter with value total
        add # add the current value to the sum
        swap # bring back the counter
        sub.1
        dup # compare to zero
        push.0
        gt
    end

    drop # discard the loop counter to be left with the total
    gte # Starting UTXO value >= total value spent as [b, a, ..]: a > b.
    assert
end

#! Pop the input UTXO and push the new UTXOs
#! Stack: [R, <tree_index>, <number_of_elements>]
proc.update_merkle_tree
    # Load up each new UTXO, has it and insert into merkle tree.
    # First one overwrites the starting UTXO
    movup.5 # bring the number of elements
    sub.4 # discard count of tx hash elements
    u32divmod.5 # each UTXO will have 5 elements
    assertz # make sure division is perfect so the provided number of elements is correct
    movdn.4 # send back how many UTXOs to add

    push.0.0.0.0 # empty merkle data
    swapw # swap empty node with state root
    movup.9 # bring back the found merkle index
    push.MERKLE_TREE_DEPTH
    mtree_set # push the empty node
    dropw # we don't need previous node data

    # Loop over to find empty nodes to insert the new UTXO outputs
    movup.4 # bring back number of UTXO to push
    push.1 # current counter for advice map UTXO index, UTXOs start from key=1
    dup.1 dup.1 # copy the counters to compare them
    gte
    while.true
        dup
        push.0.0.0 # build up the advice map index, ie. push.<counter>.0.0.0
        adv.push_mapval dropw
        movdn.5 movdn.5 # move back counters
        exec.utxo_hash # this procedure uses advice stack to get the hash
        swapw # switch the hash with the merkle root

        # Find the next empty Merkle tree index to push the UTXO hash in
        push.0.1 # start with 0th index and go in the loop with 1
        while.true
            dup movdn.5 # keep a copy of the index after the state root
            push.MERKLE_TREE_DEPTH
            mtree_get
            push.0.0.0.0 # empty hash data
            eqw # check if the node is empty
            movdn.8 dropw dropw # keep the eqw check, but discard empty data and node
            # Save the hash in tree
            if.true # found the empty spot in the tree
                movup.4 # bring back the tree index
                push.MERKLE_TREE_DEPTH
                mtree_set # [d, i, R, V', <push_index>, <#_of_utxos>] -> [V, R', <indexes>]
                dropw # we don't need the empty previous UTXO hash
                push.0 # exit the empty spot search loop
            else # continue to next tree node to find an empty spot
                movup.4 # bring back the tree index
                add.1 # increment the index
                dup # copy to compare against max number of leaves
                push.MERKLE_TREE_NUMBER_LEAVES
                lt
                assert # make sure there's more available leaves to search for
                push.1 # continue the search loop
            end
        end

        # Next hash push iteration
        movup.5 movup.5 # bring back the map index and number of UTXOs
        add.1
        dup.1 dup.1 # copy the counters to compare them
        gte
    end
    drop drop # cleanup indexes
end

#! Operand stack starts as [tx_size, TX_HASH, STATE_ROOT], where
#! `tx_size` is the number of elements in the serialized transaction.
#! The advice stack contains the transaction serialized as field elements.
#! Execution proceeds as follows:
#!   1. Verify `hash(advice_stack) == TX_HASH`.
#!   2. Verify transaction input UTXO is in the state merkle tree.
#!   3. Verify the signature over the transaction is valid.
#!   4. Verify the value of the output UTXOs is less than or equal to the input UTXO value.
#!   5. Pop the input UTXO out and push the output UTXOs into the state merkle tree.
#! Return: Finish with the updated state root in the operand stack.
proc.main
    # 1. Verify provided and computed hashes match
    exec.verify_transaction_hash

    # 2. Check the input is in the state
    exec.merkle_index

    # 3. Verify signature against transaction
    padw mem_loadw.NEW_TRANSACTION_HASH_MEMORY_INDEX
    padw adv_loadw
    mem_storew.CURRENT_UTXO_MEMORY_INDEX # keep a copy of current UTXO
    exec.rpo_falcon512::verify

    # 4. Verify UTXO is not overspent
    exec.verify_utxo

    # 5. Push UTXOs into the Merkle tree and return new state root
    exec.update_merkle_tree
end

begin
    exec.main
end
